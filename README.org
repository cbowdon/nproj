* NProj - a CLI for .NET project management

- Commands for managing .NET project files, with a familiar interface.
- Current status: prototyping. Focusing on F# support.
- N.B. managing NuGet packages intentionally excluded: use nuget.exe or paket.

** TODO Initializing a project

#+begin_src
nproj init <directory="."> --lang=(csharp|fsharp) --type=(library|exe)
#+end_src

Creates a new project file for that lang, taking the same name as the given directory. Also will create an AssemblyInfo.

** TODO Adding source files/references/other files

#+begin_src
nproj add <...filenames> --project="."
#+end_src

Action depends on the file extension:
- *.cs or *.fs will be added as a compile include
- *.csproj or *.fsproj will be added as reference include
- *.dll will be added as a reference include
- anything else will be added as a data file

If it's a source file (*.fs, *.cs) and it doesn't exist, an empty file will be created.

** TODO Removing files

#+begin_src
nproj remove <..filenames> --project="."
nproj rm <..filenames> --project="."
#+end_src

** TODO Moving files

#+begin_src
nproj move <old_filename> <new_filename> --project="."
nproj mv <old_filename> <new_filename> --project="."
#+end_src

** Issues
*** Technical debt
**** TODO Throw away the prototype
Consider following structure:
***** Parser
Convert command line arguments to (weak) types
***** Resolver
Lookup project files and infer language (convert CLI types to domain types)
***** Executor
Read, modify and write project file
***** Helper module: Filesystem abstraction
Wrapping System.IO and enabling testing
***** Main
Program flow would be simple: Main -> Parser -> Resolver -> Executor
**** TODO Tests
*** Third party
Issues with libraries, tooling, etc.
**** TODO The MSBuild library on NuGet does not work from fsx files, only compiled exes
The following code prints "30 items" when called from a compiled exe, but "0 items" when called from the fsx.
#+begin_src fsharp
#!/usr/bin/fsharpi --exec
#r "./Microsoft.Build.dll"
#r "./Microsoft.Build.Framework.dll"

open Microsoft.Build.Evaluation

let file = "/home/vagrant/Working/FSharp.ProjectTemplate.fsproj"
let proj = Project(file)
printfn "%A items" proj.Items.Count
#+end_src
**** TODO in Spacemacs on Ubuntu 14.04, I always get a segfault from the following sequence:
+ SPC f f (some file)
+ SPC w /
+ SPC f f (some other file)
